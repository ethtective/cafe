{"version":3,"file":"4.2eafbfaf7a9f73134915.hot-update.js","sources":["webpack:///js/metadata.js"],"sourcesContent":["import Eth from \"ethjs\";\nimport eip55 from \"eip55\";\nimport abi from \"../abi/metadata.json\";\nimport IPFS from \"ipfs-mini\";\nlet reader = {};\nconst eth = new Eth(new Eth.HttpProvider(\"https://ropsten.infura.io\"));\n\nconst ipfs = new IPFS({\n    host: \"ipfs.infura.io\",\n    port: 5001,\n    protocol: \"https\",\n});\n\nexport default class MetaDataContract {\n    constructor() {\n        this.contract_address = \"0x7f0b2a8c93db220637f835ef075e3dbc17beff7d\";\n        this.contract = eth.contract(abi).at(this.contract_address);\n        console.log(\"constructed\");\n        reader = new FileReader();\n        // uncomment to enable MetaMask support:\n        if (\n            typeof window.web3 !== \"undefined\" &&\n            typeof window.web3.currentProvider !== \"undefined\"\n        ) {\n            eth.setProvider(window.web3.currentProvider);\n            console.log(\"metamask!\");\n        } else {\n            // keep current infura provider\n            console.log(\"yay\");\n        }\n    }\n\n    async getAddress(address) {\n        return this.contract\n            .getByAddress(eip55.encode(address))\n            .then(result => {\n                console.log(result);\n                result[0] = eip55.encode(result[0]);\n                return {\n                    address: result[0],\n                    name: result[1],\n                    image: result[2],\n                };\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    async lookUp(address, callback) {\n        ipfs.cat(address, (err, result) => {\n            console.log(result);\n            callback(result);\n        });\n    }\n\n    async convertBlobToBase64(blob) {\n        console.log(blob);\n        return new Promise((resolve, reject) => {\n            reader.onerror = () => {\n                reader.abort();\n                reject(new DOMException(\"Problem parsing input file.\"));\n            };\n            reader.onload = () => {\n                resolve(reader.result);\n            };\n            console.log(blob);\n            reader.readAsDataURL(blob[0]);\n        });\n    }\n\n    async addMetaData(address, name, image) {\n        let base64 = await this.convertBlobToBase64(image);\n        return new Promise((resolve, reject) => {\n            ipfs.add(base64, (err, result) => {\n                console.log(result);\n                if (err)\n                    reject(new DOMException(\"Couldn't add metadata to IPFS\"));\n                return this.contract\n                    .addAddress(address, name, result, {\n                        from: web3.eth.accounts[0],\n                    })\n                    .then(result => {\n                        resolve(result);\n                    })\n                    .catch(err => {\n                        reject(err);\n                    });\n            });\n        });\n    }\n\n    async addImage(base64) {\n        return;\n    }\n}\n\nconst luckyaccounts = [\n    \"0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef \", //ens the best\n    \"0x3FA6D806609bCD5B86BE4614e97976152eC78a99\", //kickico\n    \"0xb794F5eA0ba39494cE839613fffBA74279579268\", //poloniex whale party\n    \"0x29be8158ffd14625f303c9937909d74be6585a35\", //shark\n    \"0x900d0881a2e85a8e4076412ad1cefbe2d39c566c\", //yyuuuuuge wallet contract\n    \"0xfA129DCe2215E3f16aA9b1bD31601873206157C5\", //probably the best tutorial in there, big wallet and exchange\n    \"0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B\", //a friggin blue whale\n    \"0xb3764761e297d6f121e79c32a65829cd1ddb4d32\", //multi-sig hacker\n    \"0xD74Ed380f96cb20E6EfC735d4B654Bf420123923\", //near TheDao\n    \"0x87e722173f2d28ce10ce1fa9bd862912fe7e24e6\", //unimportant, great\n    \"0xbb9bc244d798123fde783fcc1c72d3bb8c189413\", //TheDao itself\n    \"0xa62142888aba8370742be823c1782d17a0389da1\", //Fomo3D\n    \"0x00789b1c3d583e3057c264888afc2c38e4aff5b7\", //0x007 contract, and a shark, with friggin lasers\n    \"0x42d6622dece394b54999fbd73d108123806f6a18\", //Tokens now have icons\n    \"0x06012c8cf97BEaD5deAe237070F9587f8E7A266d\", //Cryptokitties\n];\n\n\n\n// WEBPACK FOOTER //\n// js/metadata.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;;;;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AAEA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AA/EA;AAoFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}